Перед выполнением задания, я ознакомилась с документацией и статьями о работе ServiceWorker, в которых был описан правильных порядок его настройки и подключения. При проверке всех этапов подключения ServiceWorker-а были выявлены участки кода, в которых были допущены ошибки. Таким образом, были исправлены ошибки 2 и 3.
Синтаксические ошибки были выявлены при попытке запуска приложения, они были выведены в консоль.
Далее при работе приложения были замечены запросы localHost:undefined, после чего в коде при помощи команды console.log() было найдено место возникновения undefined.
Пятая ошибка была найдена при разборе кода метода, в частности команды Promice.Race. Логикой приложения не предполагается, что команды получения данных с сервера и из кэша, выполняются параллельно и независимо друг от друга.


ИСПРАВЛЕННЫЕ ОШИБКИ

1. Исправлена синтаксическая ошибка лишней ';'
	return event.respondWith(
        	getFromCache(event.request).catch(fetchAndPutToCache)
    	);

2. Исправлены пути к файлам для кэширования
	'css/index.css',
	'js/index.js'

3. Файл worker.js перенесен в корень для корректного определения scope, страницы не будут подконтрольны ServiceWorker-у, если они находятся в директории выше.

4. Исправлена обработка catch при запросе данных из кэша, в случае их отсутствия в кэше, получаем их, затем кэшируем. В изначальной реализации не передавался объект запроса для получения, он был undefined.
	getFromCache(event.request).catch(function() {             
            fetchAndPutToCache(event.request); 
        })

5. Исправлена загрузка данных о студентах, сначала происходит запрос к серверу на получение данных, если сервер не доступен, получаем данные из кэша. В изначальной реализации использовался метод Promide.Race, который одновременно запускал получение данных из кэша и с сервера, и возвращал результат первого завершенного. В связи с этим, при добавлении студента, обновленный список мог быть получен из кэша, а не с сервера, если этот Promise первым возвращал результат.
	if (/^\/api\/v1/.test(requestURL.pathname)) {                	
        	return event.respondWith(
            	fetchAndPutToCache(event.request).catch(function() {
                	getFromCache(event.request);
            })              
        );
    }
6. По условиям данного задания сайт разворачивается на localhost, при этом данный код будет работать правильно.Однако, возможна потенциальная ошибка, в случае если сайт развернут на удаленном сервере. В этом случае соединение необходимо устанавливать по протоколу HTTPS для работы ServiceWorker-а. В данном же случае оно не требуется, поскольку localhost отвечает требованиям защищенности.

Так же  при первом открытии приложения в браузере происходит регистрация объекта ServiceWorker-а в браузере, однако, для открытой страницы он остается недоступен до ее перезагрузки. При повторном же открытии страницы (в новой вкладке), ServiceWorker доступен сразу и в этот момент он уже запущен.
